#!/usr/bin/env python3
import subprocess
import datetime
import argparse
import os
import sys

class CalendarEntry():
    def __init__(self):
        home_dir = os.path.expanduser('~')
        data_dir = os.path.join(home_dir, '.local', 'share', 'MankCalendar')
        try: 
            os.makedirs(data_dir)
        except FileExistsError:
            pass

        self.calendar_path = os.path.join(data_dir, 'calendar')
        self.parse_args()

    def parse_args(self):
        parser = argparse.ArgumentParser(description='Add events to a calendar')
        parser.add_argument('iso_date_input', metavar='Date', nargs='?', type=str, action='store', help='Date in iso format YYYY-MM-DD')
        parser.add_argument('-m', dest='message', metavar='message', default='Generic calendar entry.', type=str, help='Enter event title or message to be logged')
        parser.add_argument('-e', dest='editor', action='store_true', help='Use your favorite $EDITOR to open your calendar file.')
        parser.add_argument('-i', dest='interval', metavar='interval', default=28, type=int, action='store', help='Interval measured in days from start date to fetch entries. Default: 28')
        parser.add_argument('-s', dest='start_date', metavar='start date', default=datetime.date.today().isoformat(), type=str, action='store', help='Date in iso format from which entries will be displayed. Default: {current day}')
        parser.parse_args(namespace=self)
        # if date given, assume this is a WRITE
        if self.iso_date_input:
            try:
                self.date = datetime.date.fromisoformat(self.iso_date_input)
            except:
                sys.exit("ERR: The given entry date is not in the correct format")
            self.post_entry()

        elif self.editor is True:
            # Finds $EDITOR env variable. If not set, opens using vi
            editor_selection = os.environ.get('EDITOR', 'vi')
            # vi ~/.local/share/MankCalendar/calendar
            subprocess.run([editor_selection, self.calendar_path])
        
        # if no date, assume this is a READ
        else:
            try:
                self.start_date_object = datetime.date.fromisoformat(self.start_date)
            except:
                sys.exit("ERR: The given start date is not in the correct format")
            self.get_calendar(self.start_date, self.interval)

    def get_calendar(self, start, interval):
        with open(self.calendar_path, 'r') as f:
            calendar = f.readlines()
            # Convert beginning of each entry to a datetime.date object
            # Filter out dates before and after defined interval
            # Sort using the datetime.date object's comparison methods.
            calendar = filter(lambda d: self.start_date_object <= self.date_from_iso(d) <= self.start_date_object + datetime.timedelta(self.interval), calendar)
            calendar = sorted(calendar, key=lambda e: self.date_from_iso(e))
            for e in calendar:
                # newlines are already included so don't have print insert a newline each call
                print(e, end='') 
            
    def date_from_iso(self, entry_string):
        return datetime.date.fromisoformat(entry_string[:10])


    def construct_entry(self):
        return "{}: {}".format(self.iso_date_input, self.message)

    def post_entry(self):
        with open(self.calendar_path, 'a') as f:
            print(self.construct_entry(), file=f)

entry = CalendarEntry()

